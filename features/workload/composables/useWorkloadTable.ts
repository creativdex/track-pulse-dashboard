import { computed, type Ref } from 'vue';
import type { IWorkloadTask, IWorkloadItem } from '../schemas/workloadSchema';

// –†–∞—Å—à–∏—Ä—è–µ–º IWorkloadTask –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
export interface WorkloadTaskWithChildren extends IWorkloadTask {
  children?: WorkloadTaskWithChildren[];
  level?: number;
  isExpanded?: boolean;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
export interface ProjectWithTasks extends WorkloadTaskWithChildren {
  isProject: boolean;
  display: string;
}

// –û–±—â–∏–π —Ç–∏–ø –¥–ª—è —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
export type TableRowItem = WorkloadTaskWithChildren | ProjectWithTasks;

export function useWorkloadTable(
  tasks: Ref<IWorkloadTask[]>,
  projects: Ref<IWorkloadItem[]>
) {
  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∑–∞–¥–∞—á —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
  function buildHierarchyWithProjects(taskList: IWorkloadTask[], projectList: IWorkloadItem[]): TableRowItem[] {
    console.log('üîß buildHierarchyWithProjects called with:', { taskList, projectList });
    
    const taskMap = new Map<string, WorkloadTaskWithChildren>();
    const projectTasksMap = new Map<string, WorkloadTaskWithChildren[]>();
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –≤—Å–µ—Ö –∑–∞–¥–∞—á
    taskList.forEach((task) => {
      const taskWithChildren: WorkloadTaskWithChildren = {
        ...task,
        children: [],
        level: 1, // –ó–∞–¥–∞—á–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —É—Ä–æ–≤–Ω—è 1 (–ø—Ä–æ–µ–∫—Ç—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ 0)
        isExpanded: true,
      };
      taskMap.set(task.key, taskWithChildren);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
      const projectId = task.projectId || 'no-project';
      if (!projectTasksMap.has(projectId)) {
        projectTasksMap.set(projectId, []);
      }
      projectTasksMap.get(projectId)!.push(taskWithChildren);
    });
    
    // –°—Ç—Ä–æ–∏–º –∏–µ—Ä–∞—Ä—Ö–∏—é –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    taskMap.forEach((task) => {
      if (task.parentKey && taskMap.has(task.parentKey)) {
        const parent = taskMap.get(task.parentKey)!;
        parent.children!.push(task);
        task.level = (parent.level || 1) + 1;
        
        // –£–¥–∞–ª—è–µ–º –¥–æ—á–µ—Ä–Ω—é—é –∑–∞–¥–∞—á—É –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
        const projectId = task.projectId || 'no-project';
        const projectTasks = projectTasksMap.get(projectId) || [];
        const index = projectTasks.findIndex(t => t.key === task.key);
        if (index > -1) {
          projectTasks.splice(index, 1);
        }
      }
    });
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
    const result: TableRowItem[] = [];
    
    projectList.forEach((project) => {
      const projectTasks = projectTasksMap.get(project.key) || [];
      
      if (projectTasks.length > 0) {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∫–∞–∫ –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç
        const projectWithTasks: ProjectWithTasks = {
          key: project.key,
          display: project.display,
          summary: project.display,
          createdAt: new Date().toISOString(),
          hoursSpent: null,
          amount: null,
          statusKey: '',
          typeKey: 'project',
          assigneeId: null,
          projectId: null,
          sprintKey: null,
          parentKey: null,
          children: projectTasks,
          level: 0,
          isExpanded: true,
          isProject: true,
        };
        
        result.push(projectWithTasks);
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –±–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const orphanTasks = projectTasksMap.get('no-project') || [];
    if (orphanTasks.length > 0) {
      const noProjectGroup: ProjectWithTasks = {
        key: 'no-project',
        display: '–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞',
        summary: '–ó–∞–¥–∞—á–∏ –±–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞',
        createdAt: new Date().toISOString(),
        hoursSpent: null,
        amount: null,
        statusKey: '',
        typeKey: 'project',
        assigneeId: null,
        projectId: null,
        sprintKey: null,
        parentKey: null,
        children: orphanTasks,
        level: 0,
        isExpanded: true,
        isProject: true,
      };
      
      result.push(noProjectGroup);
    }
    
    return result;
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
  function flattenHierarchy(items: TableRowItem[]): TableRowItem[] {
    const result: TableRowItem[] = [];
    
    function addItem(item: TableRowItem) {
      result.push(item);
      if (item.isExpanded && item.children) {
        item.children.forEach(addItem);
      }
    }
    
    items.forEach(addItem);
    return result;
  }

  // –°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤ –ø–æ –≤—Å–µ–º –¥–æ—á–µ—Ä–Ω–∏–º –∑–∞–¥–∞—á–∞–º
  function calculateTotalHours(item: TableRowItem): number {
    let total = item.hoursSpent || 0;
    if (item.children && item.children.length > 0) {
      item.children.forEach((child) => {
        total += calculateTotalHours(child);
      });
    }
    return total;
  }

  // –°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã –ø–æ –≤—Å–µ–º –¥–æ—á–µ—Ä–Ω–∏–º –∑–∞–¥–∞—á–∞–º
  function calculateTotalAmount(item: TableRowItem): number {
    let total = item.amount || 0;
    if (item.children && item.children.length > 0) {
      item.children.forEach((child) => {
        total += calculateTotalAmount(child);
      });
    }
    return total;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–æ—Ä–∫–ª–æ–≥–æ–≤ —É –∑–∞–¥–∞—á–∏ –∏–ª–∏ —É –ª—é–±–æ–π –¥–æ—á–µ—Ä–Ω–µ–π –∑–∞–¥–∞—á–∏
  function hasWorklogsInTree(item: TableRowItem): boolean {
    // –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –∏–º–µ—é—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ—Ä–∫–ª–æ–≥–æ–≤
    if ('isProject' in item && item.isProject) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∑–∞–¥–∞—á–∏
      if (item.children && item.children.length > 0) {
        return item.children.some((child) => hasWorklogsInTree(child));
      }
      return false;
    }
    
    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º—É –∑–∞–¥–∞—á—É
    if (item.worklogs && item.worklogs.length > 0) {
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∑–∞–¥–∞—á–∏
    if (item.children && item.children.length > 0) {
      return item.children.some((child) => hasWorklogsInTree(child));
    }
    
    return false;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤
  function formatHours(hours: number | null): string {
    if (!hours) return "‚Äî";
    
    // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    const roundedHours = Math.round(hours * 10) / 10;
    
    const lastDigit = Math.floor(roundedHours) % 10;
    const lastTwoDigits = Math.floor(roundedHours) % 100;

    if (lastDigit === 1 && lastTwoDigits !== 11) {
      return `${roundedHours} —á–∞—Å`;
    } else if (
      [2, 3, 4].includes(lastDigit) &&
      ![12, 13, 14].includes(lastTwoDigits)
    ) {
      return `${roundedHours} —á–∞—Å–∞`;
    } else {
      return `${roundedHours} —á–∞—Å–æ–≤`;
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã
  function formatCurrency(amount: number | null): string {
    if (!amount) return "‚Äî";
    return new Intl.NumberFormat("ru-RU", {
      style: "currency",
      currency: "RUB",
      minimumFractionDigits: 0,
    }).format(amount);
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏
  const hierarchyTasks = computed(() => {
    console.log('üèóÔ∏è useWorkloadTable buildHierarchyWithProjects:', {
      tasksLength: tasks.value.length,
      projectsLength: projects.value.length,
      tasksData: tasks.value,
      projectsData: projects.value
    });
    
    const result = buildHierarchyWithProjects(tasks.value, projects.value);
    console.log('üìã hierarchyTasks result:', result);
    return result;
  });

  return {
    buildHierarchyWithProjects,
    flattenHierarchy,
    calculateTotalHours,
    calculateTotalAmount,
    hasWorklogsInTree,
    formatHours,
    formatCurrency,
    hierarchyTasks,
  };
}
